package com.blog.blogging.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	 @Override
	    protected void configure(HttpSecurity http) throws Exception {
	        http
	        .csrf()
	        .disable()
	            .authorizeHttpRequests()
	            .anyRequest()
	            .authenticated().and().httpBasic()
	                .antMatchers("/api/auth/**").permitAll()
	                .anyRequest().authenticated();
	    }
	 
	 @Override
	    public void configure(AuthenticationManagerBuilder auth) throws Exception {
	        // Provide your own implementation of UserDetailsService
	        auth.userDetailsService(customUserDetailsService()).passwordEncoder(passwordEncoder());
	    }

	    @Bean
	    @Override
	    public AuthenticationManager authenticationManagerBean() throws Exception {
	        return super.authenticationManagerBean();
	    }

	    @Bean
	    public PasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }

	    @Bean
	    public CustomUserDetailsService customUserDetailsService() {
	        return new CustomUserDetailsService();
	    }

}
